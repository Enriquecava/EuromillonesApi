
openapi: 3.0.3
info:
  title: Euromillones Results API
  description: |
    This API allows querying Euromillones results, managing users and their combinations.
    
    ## Main features:
    - Query historical results by date
    - Complete user management (CRUD)
    - Lottery combination management for users
    - Comprehensive input data validation
    - Detailed error handling
    - Enhanced security validations
    
    ## üîê Authentication & RLS Security:
    - **Authentication Required**: All API endpoints require Basic Authentication
    - **Row Level Security (RLS)**: Database-level protection for all data access
    - **Automatic Context**: User context is automatically set for each authenticated request
    - **Database Protection**: Even if application code has vulnerabilities, data is protected at DB level
    
    ## Security Features:
    - üîê **Basic Authentication** required for all API endpoints
    - üõ°Ô∏è **Row Level Security (RLS)** enabled on sensitive tables
    - üîí **Database-level policies** prevent unauthorized data access
    - üìä **Audit logging** for all authentication attempts and data access
    - üõ°Ô∏è Rate limiting (10 requests per minute per IP)
    - üîí Content-Type validation for POST/PUT requests
    - üìè Payload size limits (1MB maximum)
    - üîç Suspicious pattern detection (SQL injection, XSS)
    - üî§ Character encoding validation (UTF-8)
    - üßπ Input sanitization and validation
    - üìä HTTP header validation
    
    ## Test cases included:
    - ‚úÖ Successful operations with valid data
    - ‚ùå Error validation with missing/invalid data
    - üîÑ Complete user flows
    - üõ°Ô∏è Security validation tests
  version: "1.1.0"
  contact:
    name: API Support
    email: support@euromillones-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4567
    description: Local development server

security:
  - basicAuth: []

tags:
  - name: System
    description: System information and health checks
  - name: Results
    description: Euromillones results query
  - name: Users
    description: User management
  - name: Combinations
    description: Lottery combination management

paths:
  /:
    get:
      tags:
        - System
      summary: API information
      description: Gets general information about the API and its available endpoints
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: "Euromillones Results API"
                  version:
                    type: string
                    example: "1.0"
                  endpoints:
                    type: object
                    description: List of available endpoints
                  description:
                    type: string
                    example: "This API allows you to query Euromillones results, manage users and their combinations."

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Checks API status and database connectivity
      responses:
        '200':
          description: API working correctly
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "API is live and database is reachable"
        '500':
          description: API or database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /results/{date}:
    get:
      tags:
        - Results
      summary: Get result by date
      description: |
        Queries the Euromillones result for a specific date.
        
        **üîê Authentication Required**: This endpoint requires Basic Authentication.
        
        **Test cases:**
        - ‚úÖ Valid date with result: `2024-01-15`
        - ‚ùå Invalid format: `2024-13-45`
        - ‚ùå Future date: `2025-12-31`
        - ‚ùå Date without result: `2020-01-01`
      security:
        - basicAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
      responses:
        '200':
          description: Result found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotteryResult'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '400':
          description: Invalid date format or future date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_format:
                  summary: Invalid format
                  value:
                    error: "Invalid date format (use YYYY-MM-DD)"
                future_date:
                  summary: Future date
                  value:
                    error: "Date cannot be in the future"
        '404':
          description: No result found for this date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No result found for this date"

  /user:
    post:
      tags:
        - Users
      summary: Create user
      description: |
        Creates a new user with unique email.
        
        **üîê Authentication Required**: This endpoint requires Basic Authentication.
        
        **Test cases:**
        - ‚úÖ Valid email: `{"email": "user@example.com"}`
        - ‚ùå Invalid email: `{"email": "invalid-email"}`
        - ‚ùå Missing email: `{}`
        - ‚ùå Duplicate email: email already exists
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              valid_email:
                summary: Valid email
                value:
                  email: "user@example.com"
              invalid_email:
                summary: Invalid email
                value:
                  email: "invalid-email"
              missing_email:
                summary: Missing email
                value: {}
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '400':
          description: Invalid data or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_email:
                  summary: Invalid email
                  value:
                    error: "Invalid email format"
                    field: "email"
                    timestamp: "2024-01-15T10:30:00Z"
                invalid_json:
                  summary: Invalid JSON
                  value:
                    error: "Invalid JSON format"
                    field: "json_parse"
                    timestamp: "2024-01-15T10:30:00Z"
                missing_fields:
                  summary: Missing required fields
                  value:
                    error: "Missing required fields"
                    details: "The following fields are required: email"
                    field: "required_fields"
                    timestamp: "2024-01-15T10:30:00Z"
                suspicious_patterns:
                  summary: Suspicious patterns detected
                  value:
                    error: "Invalid email format"
                    field: "email"
                    timestamp: "2024-01-15T10:30:00Z"
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email already exists"
                timestamp: "2024-01-15T10:30:00Z"
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Payload too large"
                details: "Maximum allowed size is 1048576 bytes"
                field: "payload_size"
                timestamp: "2024-01-15T10:30:00Z"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Rate limit exceeded"
                details: "Maximum 100 requests per 60 seconds"
                field: "rate_limit"
                timestamp: "2024-01-15T10:30:00Z"

  /user/{email}:
    get:
      tags:
        - Users
      summary: Get user
      description: |
        Gets user information by email.
        
        **üîê Authentication Required**: This endpoint requires Basic Authentication.
        
        **Test cases:**
        - ‚úÖ Existing email: `user@example.com`
        - ‚ùå Invalid email: `invalid-email`
        - ‚ùå User not found: `notfound@example.com`
      security:
        - basicAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: User email
          schema:
            type: string
            format: email
            example: "user@example.com"
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update user email
      description: |
        Updates an existing user's email.
        
        **Test cases:**
        - ‚úÖ Valid emails: `{"email": "new@example.com"}`
        - ‚ùå Invalid email: `{"email": "invalid"}`
        - ‚ùå User not found: non-existent email in URL
        - ‚ùå New email already exists: duplicate email
      parameters:
        - name: email
          in: path
          required: true
          description: Current user email
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Email updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: New email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Delete user
      description: |
        Deletes a user by email with referential integrity validation.
        
        **Test cases:**
        - ‚úÖ Existing user: `user@example.com`
        - ‚ùå Invalid email: `invalid-email`
        - ‚ùå User not found: `notfound@example.com`
        
        **Note:** This endpoint automatically deletes all combinations associated
        with the user through database CASCADE constraints.
      parameters:
        - name: email
          in: path
          required: true
          description: Email of the user to delete
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponseEnhanced'
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{email}/delete-preview:
    get:
      tags:
        - Users
      summary: User deletion preview
      description: |
        Shows what will be deleted before proceeding with user deletion.
        Provides information about the deletion impact including
        the number of combinations that will be automatically deleted.
        
        **Test cases:**
        - ‚úÖ Existing user: `user@example.com`
        - ‚úÖ User with combinations: shows correct count
        - ‚úÖ User without combinations: shows 0 combinations
        - ‚ùå Invalid email: `invalid-email`
        - ‚ùå User not found: `notfound@example.com`
        
        **Recommended usage:** Call this endpoint before DELETE /user/{email}
        to inform the user about the deletion impact.
      parameters:
        - name: email
          in: path
          required: true
          description: User email to generate the preview
          schema:
            type: string
            format: email
            example: "user@example.com"
      responses:
        '200':
          description: Deletion preview generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeletePreview'
              examples:
                user_with_combinations:
                  summary: User with combinations
                  value:
                    email: "user@example.com"
                    user_id: 123
                    combinations_to_delete: 3
                    warning: "Deleting this user will permanently remove all associated combinations"
                    cascade_info: "This operation uses database CASCADE constraints for referential integrity"
                user_without_combinations:
                  summary: User without combinations
                  value:
                    email: "user@example.com"
                    user_id: 123
                    combinations_to_delete: 0
                    warning: "Deleting this user will permanently remove all associated combinations"
                    cascade_info: "This operation uses database CASCADE constraints for referential integrity"
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid email format"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"

  /combinations:
    post:
      tags:
        - Combinations
      summary: Create combination
      description: |
        Creates a new lottery combination for a user.
        
        **Test cases:**
        - ‚úÖ Valid data: 5 balls (1-50), 2 stars (1-12)
        - ‚ùå Missing email: `{"balls": [1,2,3,4,5], "stars": [1,2]}`
        - ‚ùå Invalid balls: less than 5, out of range, duplicated
        - ‚ùå Invalid stars: less than 2, out of range, duplicated
        - ‚ùå User not found: non-existent email
        - ‚ùå Duplicate combination: same combination for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinationCreate'
            examples:
              valid_combination:
                summary: Valid combination
                value:
                  email: "user@example.com"
                  balls: [7, 15, 23, 34, 42]
                  stars: [3, 8]
              missing_email:
                summary: Missing email
                value:
                  balls: [1, 2, 3, 4, 5]
                  stars: [1, 2]
              invalid_balls:
                summary: Invalid balls
                value:
                  email: "user@example.com"
                  balls: [1, 2, 3]
                  stars: [1, 2]
              duplicate_balls:
                summary: Duplicate balls
                value:
                  email: "user@example.com"
                  balls: [1, 1, 3, 4, 5]
                  stars: [1, 2]
      responses:
        '201':
          description: Combination created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationCreateResponse'
        '400':
          description: Invalid data or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_balls:
                  summary: Invalid balls
                  value:
                    error: "Invalid balls: must be exactly 5 unique integers between 1-50"
                    field: "balls"
                    timestamp: "2024-01-15T10:30:00Z"
                invalid_stars:
                  summary: Invalid stars
                  value:
                    error: "Invalid stars: must be exactly 2 unique integers between 1-12"
                    field: "stars"
                    timestamp: "2024-01-15T10:30:00Z"
                missing_fields:
                  summary: Missing required fields
                  value:
                    error: "Missing required fields"
                    details: "The following fields are required: email, balls, stars"
                    field: "required_fields"
                    timestamp: "2024-01-15T10:30:00Z"
                invalid_content_type:
                  summary: Invalid Content-Type
                  value:
                    error: "Invalid Content-Type"
                    details: "Expected 'application/json', got 'text/plain'"
                    field: "content_type"
                    timestamp: "2024-01-15T10:30:00Z"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Combination already exists for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Payload too large"
                details: "Maximum allowed size is 1048576 bytes"
                field: "payload_size"
                timestamp: "2024-01-15T10:30:00Z"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Rate limit exceeded"
                details: "Maximum 100 requests per 60 seconds"
                field: "rate_limit"
                timestamp: "2024-01-15T10:30:00Z"

  /combinations/{email}:
    get:
      tags:
        - Combinations
      summary: Get user combinations
      description: |
        Gets all combinations for a user.
        
        **Test cases:**
        - ‚úÖ User with combinations: `user@example.com`
        - ‚úÖ User without combinations: existing user without combinations
        - ‚ùå Invalid email: `invalid-email`
        - ‚ùå User not found: `notfound@example.com`
      parameters:
        - name: email
          in: path
          required: true
          description: User email
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User combinations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCombinations'
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /combinations/{id}:
    put:
      tags:
        - Combinations
      summary: Update combination
      description: |
        Updates an existing combination.
        
        **Test cases:**
        - ‚úÖ Valid ID and data
        - ‚ùå Invalid ID: `abc` or `0`
        - ‚ùå Combination not found: non-existent ID
        - ‚ùå Invalid data: balls/stars out of range
        - ‚ùå Duplicate combination: new combination already exists for the user
      parameters:
        - name: id
          in: path
          required: true
          description: Combination ID
          schema:
            type: integer
            minimum: 1
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinationUpdate'
      responses:
        '200':
          description: Combination updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationUpdateResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Combination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Combination already exists for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Combinations
      summary: Delete combination
      description: |
        Deletes a combination by ID.
        
        **Test cases:**
        - ‚úÖ Valid existing ID: `123`
        - ‚ùå Invalid ID: `abc` or `0`
        - ‚ùå Combination not found: non-existent ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the combination to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Combination deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationDeleteResponse'
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Combination not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error description
        details:
          type: string
          description: Additional error information
        field:
          type: string
          description: Field that caused the error
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
      required:
        - error
      examples:
        validation_error:
          summary: Validation error
          value:
            error: "Invalid email format"
            field: "email"
            timestamp: "2024-01-15T10:30:00Z"
        rate_limit_error:
          summary: Rate limit exceeded
          value:
            error: "Rate limit exceeded"
            details: "Maximum 100 requests per 60 seconds"
            field: "rate_limit"
            timestamp: "2024-01-15T10:30:00Z"
        payload_size_error:
          summary: Payload too large
          value:
            error: "Payload too large"
            details: "Maximum allowed size is 1048576 bytes"
            field: "payload_size"
            timestamp: "2024-01-15T10:30:00Z"
        content_type_error:
          summary: Invalid Content-Type
          value:
            error: "Invalid Content-Type"
            details: "Expected 'application/json', got 'text/plain'"
            field: "content_type"
            timestamp: "2024-01-15T10:30:00Z"

    LotteryResult:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Draw date
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: Main numbers (5 balls)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: Star numbers (2 stars)
        jackpot:
          type: object
          description: Prizes by category
      required:
        - date
        - balls
        - stars
        - jackpot
      example:
        date: "2024-01-15"
        balls: [7, 23, 34, 42, 48]
        stars: [3, 8]
        jackpot:
          "5":
            "2": "15000000.00"
            "1": "250000.00"
            "0": "50000.00"
          "4":
            "2": "5000.00"
            "1": "500.00"
            "0": "100.00"

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email (must be unique)
      required:
        - email
      example:
        email: "user@example.com"

    UserCreateResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
      required:
        - message
        - email
      example:
        message: "User created"
        email: "user@example.com"

    User:
      type: object
      properties:
        email:
          type: string
          format: email
        user_id:
          type: string
          description: Internal user ID
      required:
        - email
        - user_id
      example:
        email: "user@example.com"
        user_id: "123"

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: New user email
      required:
        - email
      example:
        email: "new@example.com"

    UserUpdateResponse:
      type: object
      properties:
        message:
          type: string
        old_email:
          type: string
          format: email
        new_email:
          type: string
          format: email
      required:
        - message
        - old_email
        - new_email
      example:
        message: "User email updated"
        old_email: "user@example.com"
        new_email: "new@example.com"

    UserDeleteResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
      required:
        - message
        - email
      example:
        message: "User deleted"
        email: "user@example.com"

    UserDeleteResponseEnhanced:
      type: object
      properties:
        message:
          type: string
          description: Deletion confirmation message
        email:
          type: string
          format: email
          description: Email of the deleted user
        combinations_deleted:
          type: integer
          minimum: 0
          description: Number of combinations automatically deleted
        referential_integrity:
          type: string
          description: Information about how referential integrity is maintained
      required:
        - message
        - email
        - combinations_deleted
        - referential_integrity
      example:
        message: "User deleted successfully"
        email: "user@example.com"
        combinations_deleted: 3
        referential_integrity: "Maintained via database CASCADE constraints"

    UserDeletePreview:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        user_id:
          type: integer
          description: Internal user ID
        combinations_to_delete:
          type: integer
          minimum: 0
          description: Number of combinations that will be deleted
        warning:
          type: string
          description: Warning about the deletion impact
        cascade_info:
          type: string
          description: Information about the cascade deletion mechanism
      required:
        - email
        - user_id
        - combinations_to_delete
        - warning
        - cascade_info
      example:
        email: "user@example.com"
        user_id: 123
        combinations_to_delete: 3
        warning: "Deleting this user will permanently remove all associated combinations"
        cascade_info: "This operation uses database CASCADE constraints for referential integrity"

    CombinationCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Owner user email
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: 5 unique main numbers (1-50)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: 2 unique star numbers (1-12)
      required:
        - email
        - balls
        - stars
      example:
        email: "user@example.com"
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]

    CombinationCreateResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
        balls:
          type: array
          items:
            type: integer
        stars:
          type: array
          items:
            type: integer
        combination_id:
          type: string
          description: ID of the created combination
      required:
        - message
        - email
        - balls
        - stars
        - combination_id
      example:
        message: "Combination successfully added"
        email: "user@example.com"
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]
        combination_id: "456"

    CombinationUpdate:
      type: object
      properties:
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: 5 unique main numbers (1-50)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: 2 unique star numbers (1-12)
      required:
        - balls
        - stars
      example:
        balls: [5, 18, 27, 36, 45]
        stars: [4, 9]

    CombinationUpdateResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
        balls:
          type: array
          items:
            type: integer
        stars:
          type: array
          items:
            type: integer
      required:
        - message
        - id
        - balls
        - stars
      example:
        message: "Combination updated"
        id: 456
        balls: [5, 18, 27, 36, 45]
        stars: [4, 9]

    CombinationDeleteResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
      required:
        - message
        - id
      example:
        message: "Combination deleted"
        id: 456

    Combination:
      type: object
      properties:
        id:
          type: integer
          description: Unique combination ID
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
      required:
        - id
        - balls
        - stars
      example:
        id: 456
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]

    UserCombinations:
      type: object
      properties:
        email:
          type: string
          format: email
        combinations:
          type: array
          items:
            $ref: '#/components/schemas/Combination'
      required:
        - email
        - combinations
      example:
        email: "user@example.com"
        combinations:
          - id: 456
            balls: [7, 15, 23, 34, 42]
            stars: [3, 8]
          - id: 457
            balls: [1, 12, 25, 38, 49]
            stars: [2, 11]

    AuthError:
      type: object
      properties:
        error:
          type: string
          description: Authentication error message
        details:
          type: string
          description: Additional authentication error information
        field:
          type: string
          description: Authentication field that caused the error
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
      required:
        - error
      examples:
        missing_auth:
          summary: Missing authentication
          value:
            error: "Authentication required"
            details: "Basic Authentication header is required"
            field: "authorization"
            timestamp: "2024-01-15T10:30:00Z"
        invalid_credentials:
          summary: Invalid credentials
          value:
            error: "Invalid credentials"
            details: "Username or password is incorrect"
            field: "credentials"
            timestamp: "2024-01-15T10:30:00Z"
        malformed_auth:
          summary: Malformed authorization header
          value:
            error: "Invalid authorization header format"
            details: "Expected 'Basic <base64-encoded-credentials>'"
            field: "authorization_format"
            timestamp: "2024-01-15T10:30:00Z"

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: |
        Basic Authentication required for all API endpoints.
        
        **Example Authorization Header:**
        ```
        Authorization: Basic ZXVyb21pbGxvbmVzUmFmZmxlOmtpb2tlbmNhdmExNA==
        ```