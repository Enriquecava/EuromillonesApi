
openapi: 3.0.3
info:
  title: Euromillones Results API
  description: |
    Esta API permite consultar resultados de Euromillones, gestionar usuarios y sus combinaciones.
    
    ## Caracter√≠sticas principales:
    - Consulta de resultados hist√≥ricos por fecha
    - Gesti√≥n completa de usuarios (CRUD)
    - Gesti√≥n de combinaciones de loter√≠a para usuarios
    - Validaci√≥n exhaustiva de datos de entrada
    - Manejo de errores detallado
    
    ## Casos de prueba incluidos:
    - ‚úÖ Operaciones exitosas con datos v√°lidos
    - ‚ùå Validaci√≥n de errores con datos faltantes/inv√°lidos
    - üîÑ Flujos completos de usuario
  version: "1.0"
  contact:
    name: API Support
    email: support@euromillones-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4567
    description: Servidor de desarrollo local

tags:
  - name: System
    description: Informaci√≥n del sistema y health checks
  - name: Results
    description: Consulta de resultados de Euromillones
  - name: Users
    description: Gesti√≥n de usuarios
  - name: Combinations
    description: Gesti√≥n de combinaciones de loter√≠a

paths:
  /:
    get:
      tags:
        - System
      summary: Informaci√≥n de la API
      description: Obtiene informaci√≥n general sobre la API y sus endpoints disponibles
      responses:
        '200':
          description: Informaci√≥n de la API
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: "Euromillones Results API"
                  version:
                    type: string
                    example: "1.0"
                  endpoints:
                    type: object
                    description: Lista de endpoints disponibles
                  description:
                    type: string
                    example: "This API allows you to query Euromillones results, manage users and their combinations."

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Verifica el estado de la API y la conectividad con la base de datos
      responses:
        '200':
          description: API funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "API is live and database is reachable"
        '500':
          description: Error en la API o base de datos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /results/{date}:
    get:
      tags:
        - Results
      summary: Obtener resultado por fecha
      description: |
        Consulta el resultado de Euromillones para una fecha espec√≠fica.
        
        **Casos de prueba:**
        - ‚úÖ Fecha v√°lida con resultado: `2024-01-15`
        - ‚ùå Formato inv√°lido: `2024-13-45`
        - ‚ùå Fecha futura: `2025-12-31`
        - ‚ùå Fecha sin resultado: `2020-01-01`
      parameters:
        - name: date
          in: path
          required: true
          description: Fecha en formato YYYY-MM-DD
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
      responses:
        '200':
          description: Resultado encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotteryResult'
        '400':
          description: Formato de fecha inv√°lido o fecha futura
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_format:
                  summary: Formato inv√°lido
                  value:
                    error: "Invalid date format (use YYYY-MM-DD)"
                future_date:
                  summary: Fecha futura
                  value:
                    error: "Date cannot be in the future"
        '404':
          description: No se encontr√≥ resultado para esta fecha
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No result found for this date"

  /user:
    post:
      tags:
        - Users
      summary: Crear usuario
      description: |
        Crea un nuevo usuario con email √∫nico.
        
        **Casos de prueba:**
        - ‚úÖ Email v√°lido: `{"email": "user@example.com"}`
        - ‚ùå Email inv√°lido: `{"email": "invalid-email"}`
        - ‚ùå Email faltante: `{}`
        - ‚ùå Email duplicado: email ya existente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              valid_email:
                summary: Email v√°lido
                value:
                  email: "user@example.com"
              invalid_email:
                summary: Email inv√°lido
                value:
                  email: "invalid-email"
              missing_email:
                summary: Email faltante
                value: {}
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_email:
                  summary: Email inv√°lido
                  value:
                    error: "Invalid email format"
                invalid_json:
                  summary: JSON inv√°lido
                  value:
                    error: "Invalid JSON"
        '409':
          description: Email ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email already exists"

  /user/{email}:
    get:
      tags:
        - Users
      summary: Obtener usuario
      description: |
        Obtiene informaci√≥n de un usuario por email.
        
        **Casos de prueba:**
        - ‚úÖ Email existente: `user@example.com`
        - ‚ùå Email inv√°lido: `invalid-email`
        - ‚ùå Usuario no encontrado: `notfound@example.com`
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario
          schema:
            type: string
            format: email
            example: "user@example.com"
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Actualizar email de usuario
      description: |
        Actualiza el email de un usuario existente.
        
        **Casos de prueba:**
        - ‚úÖ Emails v√°lidos: `{"email": "new@example.com"}`
        - ‚ùå Email inv√°lido: `{"email": "invalid"}`
        - ‚ùå Usuario no encontrado: email inexistente en URL
        - ‚ùå Nuevo email ya existe: email duplicado
      parameters:
        - name: email
          in: path
          required: true
          description: Email actual del usuario
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Email actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
        '400':
          description: Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Nuevo email ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Eliminar usuario
      description: |
        Elimina un usuario por email.
        
        **Casos de prueba:**
        - ‚úÖ Usuario existente: `user@example.com`
        - ‚ùå Email inv√°lido: `invalid-email`
        - ‚ùå Usuario no encontrado: `notfound@example.com`
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario a eliminar
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
        '400':
          description: Email inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /combinations:
    post:
      tags:
        - Combinations
      summary: Crear combinaci√≥n
      description: |
        Crea una nueva combinaci√≥n de loter√≠a para un usuario.
        
        **Casos de prueba:**
        - ‚úÖ Datos v√°lidos: 5 bolas (1-50), 2 estrellas (1-12)
        - ‚ùå Email faltante: `{"balls": [1,2,3,4,5], "stars": [1,2]}`
        - ‚ùå Bolas inv√°lidas: menos de 5, fuera de rango, duplicadas
        - ‚ùå Estrellas inv√°lidas: menos de 2, fuera de rango, duplicadas
        - ‚ùå Usuario no encontrado: email inexistente
        - ‚ùå Combinaci√≥n duplicada: misma combinaci√≥n para el usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinationCreate'
            examples:
              valid_combination:
                summary: Combinaci√≥n v√°lida
                value:
                  email: "user@example.com"
                  balls: [7, 15, 23, 34, 42]
                  stars: [3, 8]
              missing_email:
                summary: Email faltante
                value:
                  balls: [1, 2, 3, 4, 5]
                  stars: [1, 2]
              invalid_balls:
                summary: Bolas inv√°lidas
                value:
                  email: "user@example.com"
                  balls: [1, 2, 3]
                  stars: [1, 2]
              duplicate_balls:
                summary: Bolas duplicadas
                value:
                  email: "user@example.com"
                  balls: [1, 1, 3, 4, 5]
                  stars: [1, 2]
      responses:
        '201':
          description: Combinaci√≥n creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationCreateResponse'
        '400':
          description: Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_balls:
                  summary: Bolas inv√°lidas
                  value:
                    error: "Invalid balls: must be exactly 5 unique integers between 1-50"
                invalid_stars:
                  summary: Estrellas inv√°lidas
                  value:
                    error: "Invalid stars: must be exactly 2 unique integers between 1-12"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Combinaci√≥n ya existe para este usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /combinations/{email}:
    get:
      tags:
        - Combinations
      summary: Obtener combinaciones de usuario
      description: |
        Obtiene todas las combinaciones de un usuario.
        
        **Casos de prueba:**
        - ‚úÖ Usuario con combinaciones: `user@example.com`
        - ‚úÖ Usuario sin combinaciones: usuario existente sin combinaciones
        - ‚ùå Email inv√°lido: `invalid-email`
        - ‚ùå Usuario no encontrado: `notfound@example.com`
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Combinaciones del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCombinations'
        '400':
          description: Email inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /combinations/{id}:
    put:
      tags:
        - Combinations
      summary: Actualizar combinaci√≥n
      description: |
        Actualiza una combinaci√≥n existente.
        
        **Casos de prueba:**
        - ‚úÖ ID y datos v√°lidos
        - ‚ùå ID inv√°lido: `abc` o `0`
        - ‚ùå Combinaci√≥n no encontrada: ID inexistente
        - ‚ùå Datos inv√°lidos: bolas/estrellas fuera de rango
        - ‚ùå Combinaci√≥n duplicada: nueva combinaci√≥n ya existe para el usuario
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la combinaci√≥n
          schema:
            type: integer
            minimum: 1
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombinationUpdate'
      responses:
        '200':
          description: Combinaci√≥n actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationUpdateResponse'
        '400':
          description: Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Combinaci√≥n no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Combinaci√≥n ya existe para este usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Combinations
      summary: Eliminar combinaci√≥n
      description: |
        Elimina una combinaci√≥n por ID.
        
        **Casos de prueba:**
        - ‚úÖ ID v√°lido existente: `123`
        - ‚ùå ID inv√°lido: `abc` o `0`
        - ‚ùå Combinaci√≥n no encontrada: ID inexistente
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la combinaci√≥n a eliminar
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Combinaci√≥n eliminada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinationDeleteResponse'
        '400':
          description: ID inv√°lido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Combinaci√≥n no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Descripci√≥n del error
        details:
          type: string
          description: Informaci√≥n adicional del error
      required:
        - error
      example:
        error: "Invalid email format"

    LotteryResult:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Fecha del sorteo
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: N√∫meros principales (5 bolas)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: N√∫meros estrella (2 estrellas)
        jackpot:
          type: object
          description: Premios por categor√≠a
      required:
        - date
        - balls
        - stars
        - jackpot
      example:
        date: "2024-01-15"
        balls: [7, 23, 34, 42, 48]
        stars: [3, 8]
        jackpot:
          "5":
            "2": "15000000.00"
            "1": "250000.00"
            "0": "50000.00"
          "4":
            "2": "5000.00"
            "1": "500.00"
            "0": "100.00"

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email del usuario (debe ser √∫nico)
      required:
        - email
      example:
        email: "user@example.com"

    UserCreateResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
      required:
        - message
        - email
      example:
        message: "User created"
        email: "user@example.com"

    User:
      type: object
      properties:
        email:
          type: string
          format: email
        user_id:
          type: string
          description: ID interno del usuario
      required:
        - email
        - user_id
      example:
        email: "user@example.com"
        user_id: "123"

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Nuevo email del usuario
      required:
        - email
      example:
        email: "new@example.com"

    UserUpdateResponse:
      type: object
      properties:
        message:
          type: string
        old_email:
          type: string
          format: email
        new_email:
          type: string
          format: email
      required:
        - message
        - old_email
        - new_email
      example:
        message: "User email updated"
        old_email: "user@example.com"
        new_email: "new@example.com"

    UserDeleteResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
      required:
        - message
        - email
      example:
        message: "User deleted"
        email: "user@example.com"

    CombinationCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email del usuario propietario
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: 5 n√∫meros principales √∫nicos (1-50)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: 2 n√∫meros estrella √∫nicos (1-12)
      required:
        - email
        - balls
        - stars
      example:
        email: "user@example.com"
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]

    CombinationCreateResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
        balls:
          type: array
          items:
            type: integer
        stars:
          type: array
          items:
            type: integer
        combination_id:
          type: string
          description: ID de la combinaci√≥n creada
      required:
        - message
        - email
        - balls
        - stars
        - combination_id
      example:
        message: "Combination successfully added"
        email: "user@example.com"
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]
        combination_id: "456"

    CombinationUpdate:
      type: object
      properties:
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
          description: 5 n√∫meros principales √∫nicos (1-50)
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
          description: 2 n√∫meros estrella √∫nicos (1-12)
      required:
        - balls
        - stars
      example:
        balls: [5, 18, 27, 36, 45]
        stars: [4, 9]

    CombinationUpdateResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
        balls:
          type: array
          items:
            type: integer
        stars:
          type: array
          items:
            type: integer
      required:
        - message
        - id
        - balls
        - stars
      example:
        message: "Combination updated"
        id: 456
        balls: [5, 18, 27, 36, 45]
        stars: [4, 9]

    CombinationDeleteResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
      required:
        - message
        - id
      example:
        message: "Combination deleted"
        id: 456

    Combination:
      type: object
      properties:
        id:
          type: integer
          description: ID √∫nico de la combinaci√≥n
        balls:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 50
          minItems: 5
          maxItems: 5
        stars:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 12
          minItems: 2
          maxItems: 2
      required:
        - id
        - balls
        - stars
      example:
        id: 456
        balls: [7, 15, 23, 34, 42]
        stars: [3, 8]

    UserCombinations:
      type: object
      properties:
        email:
          type: string
          format: email
        combinations:
          type: array
          items:
            $ref: '#/components/schemas/Combination'
      required:
        - email
        - combinations
      example:
        email: "user@example.com"
        combinations:
          - id: 456
            balls: [7, 15, 23, 34, 42]
            stars: [3, 8]
          - id: 457
            balls: [1, 12, 25, 38, 49]
            stars: [2, 11]